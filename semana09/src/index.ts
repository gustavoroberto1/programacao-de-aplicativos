import { app, BrowserWindow, ipcMain } from 'electron';
import { Carro } from './entity/Carro';
import CarroRepository from './repository/CarroRepository';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const SECOND_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;


const carroRepository = new CarroRepository();
let mainWindow: BrowserWindow;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,  // MantÃ©m o contexto isolado
      nodeIntegration: false  // D
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL("http://localhost:3000/main_window");

  console.log(MAIN_WINDOW_WEBPACK_ENTRY)
  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

ipcMain.handle('teste', async (_: any, carro: any) => {
  const { id, modelo, cor, ano, preco, placa, imagem } = carro;
  const newCarro = new Carro(modelo, cor, ano, preco, placa, imagem, id)
  await carroRepository.createNewCar(newCarro)
})

ipcMain.on('change-screen', (event, screen) => {
  console.log("ENTROUUU")
  console.log(screen)
  console.log(SECOND_WINDOW_WEBPACK_ENTRY)
  if (screen === 'second') {
    mainWindow.loadFile("app://./second_window.html");
  } else if (screen === 'index') {
    mainWindow.loadFile('index.html');
  }
});